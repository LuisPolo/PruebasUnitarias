HEAD: Es el branch actual. Cuando se cambia de branches con git checkout la revision HEAD cambia para aputar al nuevo branch.
Es un puntero que indica en que rama me encuentro en cada momento. Contiene una referencia al commit mas reciente de la rama actual.
Si se quiere ver es cat .git/HEAD o git show head
ORIGIN: Es el nombre corto que indica un repositorio remoto del cual se clono. origin — that is the default name Git gives to the server you cloned from.
~ ====> ALT+126 virgulilla o tilde de la ñ

/*****************************Diferencia entre Fastforward  y Manual Merge****************************************************************/
https://platzi.com/tutoriales/1170-git-github/1692-al-realizar-fusiones-de-ramas-en-git-que-significa-fast-forward-y-manual-merge-cual-es-la-diferencia/
/******************************************************************************************************************************************/

/******************************** DIFERENCIA ENTRE MERGE Y REBASE*********************************************/
                               https://www.youtube.com/watch?v=quwMkNL4MJg
/*************************************************************************************************************/
Ambos hacen lo mismo; sin embargo con rebase se puede ordenar la historia de los cambios. Con merge los commits irian en desorden y no se tendria logica al ver la historia
JAMAS SE HACE SOBRE RAMAS PUSHEADAS
Merge (git merge rama) Me coloco en la rama a la que quiero llevar los cambios
master 1 2 3
merge dev2
       1 2 3 5
merge dev1
       1 2 3 5 4 6 (Merge)
dev1   1 2 3 4
dev2   1 2 3 5
Rebase (git rebase rama, git rebase --continue, git rebase --abort): El orden es git rebase rama, luego si hay conflictos se resuelven y guardan, se da git add -A y finalmente git rebase --continue
master 1 2 3
rebase dev2
       1 2 3 5
rebase dev1
       1 2 3 4 5
dev1   1 2 3 4
dev2   1 2 3 5

/*********************************REBASE INTERACTIVO*******************************************************/ 
             Siempre se hacen en la rama alterna nunca en la master ni sobre push
                        https://www.youtube.com/watch?v=0_QwiNnj_dA
***********************************************************************************************************/
Me permite reordenar los commits creando un nuevo hash asi como agrupar varios commits en un solo commit.
git rebase -i HEAD~4
pick: Matener el mismo commit
reword: Cambiamos el nombre del commit, debe ser de 1 a 1
squash: Los cambios se guardan en un solo commit.

/*********************************TRASLADAR FUENTES DE UN REPOSITORIO A OTRO *********************/
git clone --mirror https://git-codecommit.us-west-2.amazonaws.com/v1/repos/proyecto-beneficio
cd proyecto-beneficio.git
git remote add migracion http://git.devops.sura.net.pe/integra/proyecto-beneficio.git
git push --mirror migracion
/************************************************************************************************/

git fetch and git pull, hacen lo mismo solo que el fetch no integra la nueva data en mi branch y el pull si. El fetch sirve para ver todas las cosas que pasaron en un repositorio remoto.
git revert: commit local al Stage
git reset: regresa del stage working area

//Configuracion del GIT
git config --global user.name ""Luis Polo"
git config --list
git help

//Inicializamos repositorio
git init
//Ver en que estado esta mi proyecto
git status
//Agregamos cambios al stage
git add restful-calculadora/
//Status resumido 
git status -s
//Comiteamos a local
git commit -m "Primera version pruebas unitarias"

//Url remoto
git remote add origin git@github.com:LuisPolo/PruebasUnitarias.git
//Cambiar la url del remoto
https://github.com
git remote set-url origin https://github.com/LuisPolo/PruebasUnitarias.git
git remote set-url origin https://github.com/USERNAME/REPOSITORY.git

git remote -v
git push origin master

ssh-keygen -t rsa -b 4096 -C "luispolomartinez@gmail.com"
cat ~/.ssh/id_rsa.pub

//añadir repositorios remotos
git remote add [nombre] [url]:
git remote add pb git://github.com/paulboone/ticgit.git

/*Antes de hacer el pull debo comitear todos mis cambios sino todo sera reemplazado por las fuentes del master del origin*/
git pull <repositorio><branch>
git pull origin master
git push -f origin master
touch pasos.txt

//Cambiar proxy
//Con el ssh

git clone git@github.com:LuisPolo/PruebasUnitarias.git

/*configurar proxy sin/con autenticacion*/
git config --global http.proxy http://192.168.10.24:8080
git config --global http.proxy http://P047455:Suraperu42@10.219.117.29:3128
git config --global https.proxy http://P047455:Suraperu42@10.219.117.29:3128

git config --global --get http.proxy
git config --global --unset http.proxy
//Para probar si el puerto esta bloqueado - The reason could be the firewall modification as you are under a network
ssh -T git@github.com
//Si se quiere hacer por https
git clone https://github.com/LuisPolo/PruebasUnitarias.git

--Ver la configuracion local
git config --local -e
--Salir de la pantalla (http://www.unirioja.es/cu/enriquez/docencia/Quimica/vi.pdf)
ESC :q! 

--Como crear ramas por comandos
git checkout -b "developer"

--Como eliminar branches
git branch -d develop

--Forzar eiminacion de rama
git branch -D develop

--Crear la rama en repositorio remoto
git push origin "nombre de la rama en el remoto"

--Actualizar esta eliminacion en el remoto
git push origin :develop

--Como ver las ramas creadas
git branch

--Como ver que elementos se han subido al stage
git diff --cached

--Ver log de manera ordenada (https://git-scm.com/book/es/v2/Fundamentos-de-Git-Ver-el-Historial-de-Confirmaciones)
--https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298
-- I have two aliases I normally throw in my ~/.gitconfig file:
git config --global alias.lg1 "se pone lo que se desea"
git log --pretty=format:"%h %s" --graph

[alias]
lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''%C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
lg = !"git lg1"

--Retornar el stage al working area
git reset head
